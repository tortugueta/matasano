# -*- coding: utf-8 -*-

# The matasano cryptography challeges
# Set 2 / Challenge 16
# CBC bitflipping attacks

# Imports
import matasanolib
from Crypto.Cipher import AES

# Generate the random encryption key and the cipher
blocksize = 16
key = matasanolib.random_key(blocksize)
iv = matasanolib.random_key(blocksize)

# Define the first function (encryption)
def addUserData(string):
	"""
	This function "dresses" the input string by prepending and appending two
	strings to it, then pkcs7-padding it to 16 bytes and then encrypting it
	with AES-CBC with a random key (always the same random key). The function
	should not allow, or at least somehow quote, the characters ";" and "=" in
	the string.

	Parameters
	----------
	string : a Python string
		The user data

	Returns
	-------
	A Python string with the encrypted contents
	"""

	# Sanitize input
	if type(string) == str:
		split = string.split(";")
		quoted = '\;'.join(split)
		split = quoted.split("=")
		quoted = '\='.join(split)
	else:
		print("Input must be a Python string")
		raise TypeError

	# Prepend and append the comments
	comment1 = "comment1=cooking%20MCs;userdata="
	comment2 = ";comment2=%20like%20a%20pound%20of%20bacon"
	fullstr = "".join([comment1, quoted, comment2])
	paddedstr = matasanolib.pkcs7padding(fullstr, blocksize)

	# Encrypt with AES-CBC using a random key
	cipher = AES.new(key, IV=iv, mode=AES.MODE_CBC)
	return cipher.encrypt(paddedstr)

# Define the second function (decryption and parsing)
def isAdmin(ciphertext):
	"""
	Decrypts the ciphertext generated by addUserData and looks for the
	';admin=true;' substring in the plaintext. It returns true if the substring
	is found and false otherwise.

	Note that it should not be possible to input that string using addUserData.
	Therefore, the only way to inject that is by manipulation of the ciphertext.

	Parameters
	----------
	ciphertext : a Python string
		A ciphertext generated by the addUserData function

	Returns
	-------
	True if the ';admin=true;' substring is found in the plaintext, false
	otherwise.
	"""

	# Decrypt the cipertext
	cipher = AES.new(key, IV=iv, mode=AES.MODE_CBC)
	plaintext = cipher.decrypt(ciphertext)
	plaintext = matasanolib.pkcs7padding(plaintext, 0)

	# Look for the desired string
	partition = plaintext.split(";")
	if "admin=true" in partition:
		return True
	else:
		return False


# To solve the challenge, we will input the following string:
#	;admin<true
#
# The difference between '<' and '=' is the last bit of their binary
# representation (it's a 1 for '=' and a 0 for '<').
# Now, let's say that this particular bit is located in the n-th position of
# the m-th block of the ciphertext. Due to how CBC works, if we flip the n-th
# bit  of the (m-1)-th block of the ciphertext, the n-th bit of the m-th block
# of the plaintext will also be flipped, therefore turning our original '<'
# into an '=', which is what we want.
#
# Since we don't know in what position our '<' is, what we do is flip the
# last bit of every character of the ciphertext and decrypt until we get our
# result. We could find in what block our string is located and start
# flipping only in the previous block, but for the purpose of this excercise,
# we just go the brute way.
userdata = ";admin<true"
ciphertext = addUserData(userdata)
for (index, char) in enumerate(ciphertext):
	# Find if the binary representation of the character ends in 1 or 0
	if bin(ord(char))[-1] == '0':
		# We need to add 1
		newchar = chr(ord(char) + 1)
	else:
		# We need to substract 1
		newchar = chr(ord(char) - 1)
	listcipher = list(ciphertext)
	listcipher[index] = newchar
	flipped = "".join(listcipher)

	# Decrypt the modified ciphertext and look for the desired substring
	if isAdmin(flipped):
		break

# At this point we have the ciphertext that will decrypt to what we want
cipher = AES.new(key, IV=iv, mode=AES.MODE_CBC)
print "Original ciphertext:"
print repr(ciphertext)
print ""

print "Decrypted original ciphertext:"
print repr(matasanolib.pkcs7padding(cipher.decrypt(ciphertext), 0))
print ""

print "Modified ciphertext:"
print repr(flipped)
print ""

print "Decrypted modified ciphertext:"
print repr(matasanolib.pkcs7padding(cipher.decrypt(flipped), 0))
print ""

print "Success! You're admin"

